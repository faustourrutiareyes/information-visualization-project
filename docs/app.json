[{"name": "app.py", "content": "import seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib import ticker\n\n# Import data from shared.py\nfrom shared import df_mean, line_mean\nfrom shiny.express import input, render, ui\n\n# Page title (with some additional top padding)\nui.page_opts(\n    title=ui.h2(\n        \"A Study of The Relationship Between Screen Time And Life Satisfaction of Different Age Groups In Taiwan\"\n    )\n)\n\nwith ui.sidebar(width=\"40%\"):\n    ui.input_checkbox_group(\n        \"checkbox_age_group\",\n        \"Age group\",\n        {\n            1: \"12-14 years old\",\n            2: \"15-19 years old\",\n            3: \"20-29 years old\",\n            4: \"30-39 years old\",\n            5: \"40-49 years old\",\n            6: \"50-59 years old\",\n            7: \"60-69 years old\",\n            8: \"70-79 years old\",\n        }\n    )\n\n    \n\n\nwith ui.card(height=\"100%\"):\n\n    ui.h4(\"Life Satisfaction from 0 to 10\")\n    \n    @render.plot\n    def hist():\n        # Create the plot and axes\n        fig, ax = plt.subplots()\n\n        ages_dict = {\n            1: \"12-14 years old\",\n            2: \"15-19 years old\",\n            3: \"20-29 years old\",\n            4: \"30-39 years old\",\n            5: \"40-49 years old\",\n            6: \"50-59 years old\",\n            7: \"60-69 years old\",\n            8: \"70-79 years old\",\n        }\n        \n        color_dict = {\n            1: \"#90b9f5\",\n            2: \"#62a1fc\",\n            3: '#3885f2',\n            4: '#78f8ff',\n            5: '#1cdbe6',\n            6: '#ffb0fb',\n            7: '#e6c5e4',\n            8: '#cc97c8'\n        }\n\n        ax.grid(which=\"major\", axis=\"y\", color=\"#758D99\", alpha=0.2)\n        ax.spines[\"bottom\"].set_linewidth(2)\n\n        # Define the gray palette\n        gray_palette = [(0.5, 0.5, 0.5, 0.3)] * df_mean[\"age_range\"].nunique()\n\n        \n\n        average = sns.lineplot(\n            x=\"3months_use_per_week\",\n            y=\"life_satisfaction_0to10\",\n            data=line_mean,\n            legend=False,\n            color=\"gray\",\n            linestyle=\"--\",\n            linewidth=4,\n            ax=ax,  # Specify the ax parameter here\n        )\n        \n        handles = [average.get_lines()[0]]\n        labels = ['Average']\n\n        sns.lineplot(\n            x=\"3months_use_per_week\",\n            y=\"life_satisfaction_0to10\",\n            hue=\"age_range\",\n            palette=gray_palette,\n            data=df_mean,\n            legend=False,\n            linewidth=3,\n            ax=ax,  # Specify the ax parameter here\n        )\n\n        for i in input.checkbox_age_group():\n            i = int(i)\n            line = sns.lineplot(\n                x=\"3months_use_per_week\",\n                y=\"life_satisfaction_0to10\",\n                data=df_mean[df_mean[\"age_range\"] == i],\n                color=color_dict.get(i, \"black\"),\n                legend=True,\n                linewidth=6,\n                ax=ax\n            )\n            handle = line.get_lines()[-1]\n            handles.append(handle)  # Collect handle for the line\n            labels.append(f\"{ages_dict[i]}\")  # Collect label for the legend\n\n        ax.spines[[\"top\", \"right\", \"left\"]].set_visible(False)\n\n        ax.set_ylim(4.5, 9.5)\n        ax.xaxis.set_tick_params(labelsize=15)\n\n        # Customize the grid\n        ax.grid(axis=\"y\", visible=True)  # Turn off vertical grid lines\n        ax.grid(axis=\"x\", visible=False)\n\n        ax.yaxis.set_tick_params(\n            pad=4,  # Pad tick labels so they don't go over y-axis\n            labeltop=False,  # Put x-axis labels on top\n            labelbottom=True,  # Set no x-axis labels on bottom\n            bottom=False,  # Set no ticks on bottom\n            labelsize=11,\n            color=(0.5, 0.5, 0.5, 0.01),\n        )  # Set tick label size\n\n        # Define your x-axis tick positions\n        x = [5, 4, 3, 2, 1]  # Adjust as needed based on your data\n\n        # Define your x-axis tick labels\n        xticks_labels = [\n            \"Once a week\",\n            \"2-3 times a week\",\n            \"4-6 times a week\",\n            \"Everyday infrequent\",\n            \"Everyday frequent\",\n        ]\n\n        if handles:\n            ax.legend(\n                handles=handles,\n                labels=labels,\n                loc=\"upper right\",\n                bbox_to_anchor=(1.2, 1),\n            )\n\n        # Set the x-axis ticks and labels\n        plt.xticks(x, xticks_labels, rotation=60, ha=\"right\")\n\n        ax.yaxis.set_major_locator(ticker.MaxNLocator(integer=True))\n        ax.invert_xaxis()\n\n        plt.tick_params(axis=\"x\", labelsize=11)\n        plt.xlabel(\"\")\n        plt.ylabel(\"\")\n\n        return fig\n    \n    \n    source_tag = ui.div(\"Source: Academia Sinica (2022)\")\n    source_tag.add_style('font-size: 12px; color: #758D99;')\n", "type": "text"}, {"name": "df_mean.csv", "content": "age_range,3months_use_per_week,life_satisfaction_0to10\n1,1,7.446808510638298\n1,2,7.786516853932584\n1,3,7.318181818181818\n1,4,7.694444444444445\n1,5,8.5\n2,1,7.092783505154639\n2,2,7.318965517241379\n2,3,7.428571428571429\n2,4,7.75\n2,5,9.0\n3,1,7.14245810055866\n3,2,7.236686390532545\n3,3,7.5\n3,4,7.590909090909091\n4,1,7.158945117605132\n4,2,7.16271186440678\n4,3,6.8\n4,4,7.277777777777778\n4,5,5.0\n5,1,7.169040247678018\n5,2,7.017605633802817\n5,3,6.722222222222222\n5,4,7.296296296296297\n5,5,6.0\n6,1,7.097857142857142\n6,2,6.931288343558283\n6,3,6.947368421052632\n6,4,7.0\n6,5,6.916666666666667\n7,1,7.217557251908397\n7,2,7.156729131175468\n7,3,7.115384615384615\n7,4,6.764705882352941\n7,5,6.555555555555555\n8,1,7.337696335078534\n8,2,7.257843137254902\n8,3,6.917808219178082\n8,4,7.197530864197531\n8,5,6.64\n", "type": "text"}, {"name": "line_mean.csv", "content": "3months_use_per_week,life_satisfaction_0to10\n1,7.171249127704117\n2,7.1377425526100025\n3,7.015151515151516\n4,7.202105263157895\n5,6.722222222222222\n", "type": "text"}, {"name": "requirements.txt", "content": "shiny\nseaborn\npandas\nmatplotlib", "type": "text"}, {"name": "shared.py", "content": "from pathlib import Path\n\nimport pandas as pd\n\napp_dir = Path(__file__).parent\ndf_mean = pd.read_csv(app_dir / \"df_mean.csv\")\nline_mean = pd.read_csv(app_dir / \"line_mean.csv\")\n", "type": "text"}]